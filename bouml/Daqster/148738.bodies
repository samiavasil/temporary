class QCommandExecutor
!!!174722.cpp!!!	QCommandExecutor(in parent : QObject = 0)
m_timer = NULL;
!!!173826.cpp!!!	appendCommand(in command : CCommand) : int
int ret = NO_ERR;                                     
if( command ){                                        
    QCommand* qcomm = (QCommand *)command;            
    /*TODO - Should add command type validation code*/
    if( qcomm ){                                      
      m_commands.append( qcomm );                     
    }                                                 
}                                                     
else{                                                 
    ret = WRONG_PARAMS;                               
}                                                     
return ret; 
!!!181890.cpp!!!	removeCommand(in comm : int) : int
QCommand * cmd = m_commands.takeAt(comm); 
if( cmd ){                                
    cmd->deleteLater();                   
}                                         
!!!174466.cpp!!!	executeCommand(in comm_num : int) : int
int ret = 0;                                           
CCommand * comm = m_commands.value( comm_num, NULL);   
if( comm ){                                            
    ret = comm->handler();                             
}                                                      
return ret;                                            
!!!174210.cpp!!!	flushCommands() : void
QCommand * comm;                 
while( 0 < m_commands.count() ){ 
    comm = m_commands.takeAt(0); 
    if( comm ){                  
        comm->deleteLater();     
    }                            
}                                                          
!!!174338.cpp!!!	getCommNum() : int
return m_commands.count();
!!!173954.cpp!!!	pauseExecution(in pause : bool) : int
int ret = NO_ERR;                                  
lockObject();                                      
if( true == isRunning() ){                         
    if( m_timer ){                                 
        if( true == pause ){                       
            m_timer->stop();                       
        }                                          
        else{                                      
            if( 0 < m_commands.count() )           
            {                                      
                m_timer->start(m_CommandLoopTime); 
            }                                      
        }                                          
    }                                              
    else{                                          
        ret = NULL_POINTER;                        
    }                                              
}                                                  
else{                                              
    /*Thread isn't running*/                       
    ret = SOME_ERROR;                              
}                                                  
unlockObject();                                    
return ret;                                        
!!!174082.cpp!!!	startExecution(in starting : bool) : int
if( true == starting ){     
    if( 0 == isRunning() ){ 
        start();            
    }                       
}                           
else{                       
    exit(0);                
}                                               
!!!182402.cpp!!!	startTimer() : void
if( m_timer ){
    m_timer->start(m_CommandLoopTime);
}
!!!173570.cpp!!!	lockObject() : void
m_mutex.lock();
!!!174594.cpp!!!	run() : void
int retCode = 0;                            
lockObject();                               
initTimer();                                
unlockObject();                             
if( NO_ERR != pauseExecution( false ) ){    
    exit(1);                                
}                                           
retCode = exec();                           
qDebug("Thread exit with code: %d",retCode);                                                                                                  
!!!173698.cpp!!!	unlockObject() : void
m_mutex.unlock();
!!!182274.cpp!!!	initTimer() : int
 if( NULL == m_timer ){
        m_timer = new QTimer();
        m_timer->setSingleShot( true );
        connect( m_timer, SIGNAL(timeout()), this, SLOT( timerHandlerExecuteCommands() ),Qt::DirectConnection );
 }
return NO_ERR;
!!!181506.cpp!!!	timerHandlerExecuteCommands() : void
timerHandlerExecuteAllCommands();
